name: Bump Patch Version and release

on: 
  push:
    tags-ignore:
      - '**'
    branches:
      - main

jobs:
  bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: remla25-team2-bot
          password: ${{ secrets.GHBOT_TOKEN }} 

      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v2

      - name: Fetch all tags
        run: |
          git fetch --tags

      - name: Get latest version tag
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-creatordate | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n 1)
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Bump patch version
        id: bump
        run: |
          tag=${{ steps.get_tag.outputs.tag }}
          if [ -z "$tag" ]; then
            echo "No existing tags found, using v0.0.1"
            echo "new_tag=v0.0.1" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor patch <<< "${tag#v}"
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
            echo "Bumped to $new_tag"
            echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          fi

      - name: Create new tag and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}
      
      - name: Parse version info from new tag
        id: parse
        run: |
          TAG=${{ steps.bump.outputs.new_tag }}
          VERSION=${TAG:1}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
        
      - name: Build and push multi-arch image
        run: |
          IMG="ghcr.io/${{ github.repository }}"
          IMG=${IMG@L}
          
          docker buildx create --use --name multiarch-builder
          docker buildx inspect --bootstrap

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            --push \
            .
