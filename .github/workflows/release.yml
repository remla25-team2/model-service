name: Release Model Service

on:
  push:
    branches:
      - main
    tags:
      - "v*.*"

env:
  PYTHON_VERSION: "3.10"
  COVERAGE_THRESHOLD: "0"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install base dependencies first, including lib-ml and lib-version from requirements.txt
          pip install -r requirements.txt
          # Install development and testing tools
          pip install pytest coverage pytest-cov pylint memory-profiler

      - name: Unit tests + coverage
        run: |
          # Run tests with coverage for the 'app' directory
          coverage run --source=app -m pytest -v
          coverage report
          coverage xml
          # Extract coverage percentage from the report
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "COVER=$COVERAGE" >> $GITHUB_ENV
          echo "Code coverage: $COVERAGE%"

      - name: Fail if coverage below threshold
        run: |
          python - << 'PY'
          import os, sys
          cov = float(os.environ.get("COVER", "0"))
          thr = float(os.environ["COVERAGE_THRESHOLD"])
          print(f"Code Coverage: {cov:.1f}% (Threshold: {thr}%)")
          if cov < thr:
              sys.exit(f"Coverage {cov:.1f}% is below the threshold {thr}%")
          PY

  build:
    needs: test
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install lib-version
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/remla25-team2/lib-version@v0.2.2

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: remla25-team2-bot
          password: ${{ secrets.GHBOT_TOKEN }}

      # For tagged releases
      - name: Get release version with lib-version
        id: get_version
        run: |
          VERSION=$(lib-version version current)
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version=$VERSION"
          echo "version_major=$MAJOR"
          echo "version_minor=$MINOR"
          BUMPED_VERSION=$(lib-version version next)
          echo "bumped_version=$BUMPED_VERSION"

      - name: Bump version with lib-version
        if: startsWith(github.ref, 'refs/tags/')
        id: bump_version
        run: |
          lib-version bump patch --push
          VERSION=$(lib-version version current)
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version=$VERSION"
          echo "version_major=$MAJOR"
          echo "version_minor=$MINOR"

      - name: Create builder
        id: buildx
        run: |
          IMG="ghcr.io/${{ github.repository }}"
          IMG=${IMG@L}

          docker buildx create --use --name multiarch-builder
          docker buildx inspect --bootstrap

      - name: Build and push multi-arch image (release)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          IMG="ghcr.io/${{ github.repository }}"
          IMG=${IMG@L}

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            --push \
            .

      # For main branch (pre-release)
      - name: Get pre-release version with lib-version
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        id: pre_version
        run: |
          NEXT_VERSION=$(lib-version version next)
          PRE_VERSION="${NEXT_VERSION}-pre"
          echo "pre_version=$PRE_VERSION" >> $GITHUB_ENV

      - name: Build and push multi-arch image (pre-release)
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          IMG="ghcr.io/${{ github.repository }}"
          IMG=${IMG@L}

          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMG:${{ env.pre_version }} \
            --tag $IMG:pre-release \
            --push \
            .
